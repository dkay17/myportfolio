<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Video Carousel</title>
<style>
    body {
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
    }
    .video-container {
        display: flex;
        align-items: center;
        /* overflow: hidden; */
		overflow-y: scroll;
    }
    .video {
        width: 400px;
        height: auto;
        margin-right: 10px;
        transition: width 500ms ease-in-out;
    }
    .playing {
        width: 600px;
    }
</style>
</head>
<body>

<div class="video-container">
    <video class="video" controls muted>
        <source src="videos/video1.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>
    <video class="video" controls muted>
        <source src="videos/video2.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>
    <video class="video" controls muted>
        <source src="videos/video3.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>
    <video class="video" controls muted>
        <source src="videos/video4.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>
    <video class="video" controls muted>
        <source src="videos/video5.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>
    <video class="video" controls muted>
        <source src="videos/video6.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>
    <video class="video" controls muted>
        <source src="videos/video7.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>
    <video class="video" controls muted>
        <source src="videos/video8.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>
</div>

<script>
    const videos = document.querySelectorAll('.video');
    let currentIndex = 0;

    function playNextVideo() {
        const currentVideo = videos[currentIndex];
        currentVideo.pause();
        currentVideo.classList.remove('playing');

        currentIndex = (currentIndex + 1) % videos.length; // Move to the next video

        const nextVideo = videos[currentIndex];
        nextVideo.play();
        nextVideo.classList.add('playing');
    }

    // Play the first video initially
    videos[currentIndex].play();
    videos[currentIndex].classList.add('playing');

    // Set interval to play next video every 5 seconds
    setInterval(playNextVideo, 5000);

    // Add event listener to pause and remove class when video is paused
    videos.forEach(video => {
        video.addEventListener('pause', () => {
            video.classList.remove('playing');
        });
    });
</script>

</body>
</html>













<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Auto-scrolling Scroll Button</title>
<style>
    body {
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
    }
    .scroll-container {
        width: 400px;
        height: 200px;
        border: 1px solid #ccc;
        overflow: hidden;
        position: relative;
    }
    .scroll-content {
        display: flex;
        width: 2000px; /* Adjust based on content width */
        transition: transform 500ms ease-in-out;
    }
    .scroll-button {
        width: 50px;
        height: 50px;
        background-color: dodgerblue;
        color: white;
        text-align: center;
        line-height: 50px;
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
    }
</style>
</head>
<body>

<div class="scroll-container">
    <div class="scroll-content">
        <div class="scroll-item">1</div>
        <div class="scroll-item">2</div>
        <div class="scroll-item">3</div>
        <div class="scroll-item">4</div>
        <div class="scroll-item">5</div>
        <div class="scroll-item">6</div>
        <div class="scroll-item">7</div>
        <div class="scroll-item">8</div>
        <div class="scroll-item">9</div>
        <div class="scroll-item">10</div>
    </div>
    <div class="scroll-button" onclick="scrollRight()">➡️</div>
</div>

<script>
    const scrollContent = document.querySelector('.scroll-content');
    const scrollButton = document.querySelector('.scroll-button');

    function scrollRight() {
        const currentScroll = scrollContent.scrollLeft;
        const itemWidth = scrollContent.clientWidth; // Width of visible area
        const maxScroll = scrollContent.scrollWidth - itemWidth;

        if (currentScroll < maxScroll) {
            scrollContent.scrollTo({
                left: currentScroll + itemWidth,
                behavior: 'smooth'
            });
        } else {
            // Reset to start when reaching the end
            scrollContent.scrollTo({
                left: 0,
                behavior: 'smooth'
            });
        }
    }

    function autoScroll() {
        setInterval(scrollRight, 3000); // Auto-scroll every 3 seconds (3000 milliseconds)
    }

    autoScroll(); // Start auto-scrolling
</script>

</body>
</html>












<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Auto-scrolling Number Container</title>
<style>
    body {
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
    }
    .numContainer {
        width: 200px;
        height: 200px;
        border: 1px solid #ccc;
        overflow-x: auto;
        white-space: nowrap;
    }
    .number {
        display: inline-block;
        padding: 5px;
        font-size: 16px;
    }
</style>
</head>
<body>

<div class="numContainer" id="numContainer">
    <!-- JavaScript will populate numbers here -->
</div>

<script>
    const numContainer = document.getElementById('numContainer');

    // Populate numbers from 1 to 100
    for (let i = 1; i <= 100; i++) {
        const numberDiv = document.createElement('div');
        numberDiv.classList.add('number');
        numberDiv.textContent = i;
        numContainer.appendChild(numberDiv);
    }

    // Auto-scroll function
    function autoScroll() {
        setInterval(() => {
            const currentScroll = numContainer.scrollLeft;
            const containerWidth = numContainer.clientWidth; // Width of visible area
            const maxScroll = numContainer.scrollWidth - containerWidth;

            if (currentScroll < maxScroll) {
                numContainer.scrollTo({
                    left: currentScroll + containerWidth,
                    behavior: 'smooth'
                });
            } else {
                // Reset to start when reaching the end
                numContainer.scrollTo({
                    left: 0,
                    behavior: 'smooth'
                });
            }
        }, 3000); // Auto-scroll every 3 seconds (3000 milliseconds)
    }

    autoScroll(); // Start auto-scrolling
</script>

</body>
</html>













<!--Portfolio Text-->
Welcome to My Portfolio!

I'm [Your Name], a passionate web developer based in [Your Location]. With a focus on crafting engaging and 
user-friendly digital experiences, I specialize in front-end and back-end web development.

As a web developer, I thrive on turning creative ideas into functional and responsive websites. My journey in 
the world of web development has equipped me with expertise in HTML, CSS, JavaScript, and various frameworks and 
libraries like React and Node.js.

This portfolio is a showcase of my work, featuring a range of projects that highlight my skills in building 
intuitive interfaces, optimizing performance, and integrating innovative functionalities. From e-commerce 
platforms to interactive web applications, each project reflects my commitment to delivering high-quality and 
impactful solutions.

Whether you're looking to collaborate, seeking web development services, or simply exploring my work, I invite 
you to browse through my portfolio. Let's connect and bring your digital vision to life!







<!--What to add-->
Introduction or About Me Section:
Provide a brief introduction that highlights who you are, your background, and your expertise.
Include a professional photo of yourself to personalize your portfolio.

Portfolio Showcase:
Display a selection of your best work, projects, or case studies. Use high-quality images, videos, or screenshots.
Categorize your projects by type (e.g., web design, graphic design, photography) or industry (e.g., healthcare,
 education, technology).

Services or Skills Section:
Clearly outline the services you offer or your areas of expertise.
List specific skills, technologies, or tools you are proficient in.

Testimonials or Reviews:
Include client testimonials or reviews to build credibility and showcase your past successes.
Highlight positive feedback from previous employers, clients, or collaborators.

Resume or CV:
Provide a downloadable version of your resume or curriculum vitae (CV) for detailed information about your 
education, experience, and skills.

Contact Information:
Make it easy for visitors to get in touch with you. Include a contact form or provide your email address and 
social media profiles.
Consider adding a clear call-to-action (CTA) prompting visitors to reach out for inquiries or collaborations.

Blog or Insights (Optional):
If relevant, include a blog section where you share industry insights, tips, or project updates.
Regularly updating a blog can demonstrate your expertise and keep visitors engaged.

Responsive Design:
Ensure your website is mobile-friendly and looks good on all devices (desktops, tablets, smartphones).

Visual Consistency and Branding:
Use a consistent color scheme, typography, and design style that aligns with your personal brand or industry.

Call to Action (CTA):
Strategically place CTAs throughout your website to guide visitors towards specific actions such as contacting 
you or viewing your portfolio.

Achievements or Awards (Optional):
Highlight any relevant achievements, awards, or certifications that demonstrate your expertise and credibility.

FAQ Section (Optional):
Address common questions or concerns visitors may have about your services, process, or availability.













<!--Links to add-->
1. Github
2. LinkedIn
3. Facebook
4. Twitter

whatsapp --- <i class="fa-brands fa-whatsapp"></i>
mail --- <i class="fa-solid fa-envelope"></i>




<iframe src="https://www.google.com/maps/embed?pb=!1m17!1m12!1m3!1d3970.5348978401466!2d-0
.0941107589576373!3d5.635444818411749!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m2!1m1!2s!5e0!3m2!1sen
!2sgh!4v1714623436680!5m2!1sen!2sgh" width="400" height="300" style="border:0;" allowfullscreen="" loading="lazy" 
referrerpolicy="no-referrer-when-downgrade"></iframe>




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Word Processing</title>
</head>
<body>
    <h2>Word Processor</h2>
    <form id="wordForm">
        <label for="input1">Input 1:</label>
        <input type="text" id="input1" name="input1" required><br><br>
        
        <label for="input2">Input 2:</label>
        <input type="text" id="input2" name="input2" required><br><br>
        
        <button type="button" onclick="processWords()">Process Words</button>
    </form>

    <div id="output"></div>

    <script>
        function processWords() {
            // Get the values from the input fields
            const input1 = document.getElementById('input1').value.trim();
            const input2 = document.getElementById('input2').value.trim();

            // Split the text into arrays of words
            const words1 = input1.split(/\s+/); // Split by whitespace
            const words2 = input2.split(/\s+/); // Split by whitespace

            // Combine all words from both inputs
            const allWords = [...words1, ...words2];

            // Process each word and append '4'
            const processedWords = allWords.map(word => word + '4');

            // Display the processed words on the web page
            const outputDiv = document.getElementById('output');
            outputDiv.innerHTML = '<h3>Processed Words:</h3>';
            const ulElement = document.createElement('ul');

            processedWords.forEach(word => {
                const liElement = document.createElement('li');
                liElement.textContent = word;
                ulElement.appendChild(liElement);
            });

            outputDiv.appendChild(ulElement);
        }
    </script>
</body>
</html>
